{
  "New Laravel Class": {
    "isFileTemplate": true,
    "description": "Create a class with the correct namespace. Fine tuned for Laravel",
    "prefix": "new:laravel:class",
    "body": [
      "namespace ${RELATIVE_FILEPATH/^(app)\\/([^\\/]+)\\/[^\\/]+\\.php$/App\\$2/g};",
      "",
      "class ${TM_FILENAME_BASE}",
      "{",
      "  $0",
      "}"
    ]
  },
  "New Pest Test": {
    "description": "Create a Pest test structure",
    "prefix": "new:pest:test",
    "body": [
      "it('$1', function () {",
      "    $0",
      "});"
    ]
  },
  "New Laravel Interface": {
    "description": "Create a Laravel interface with the correct namespace",
    "prefix": "new:laravel:interface",
    "body": [
      "namespace ${RELATIVE_FILEPATH/^(app)\\/([^\\/]+)\\/[^\\/]+\\.php$/App\\$2/g};",
      "",
      "interface ${TM_FILENAME_BASE} {",
      "    $0",
      "}"
    ]
  },
  "New Laravel Action": {
    "description": "Create a Laravel action class with a handle function",
    "prefix": "new:laravel:action",
    "body": [
      "namespace ${RELATIVE_FILEPATH/^(app)\\/([^\\/]+)\\/[^\\/]+\\.php$/App\\$2/g};",
      "",
      "class ${TM_FILENAME_BASE} {",
      "    public function handle() {",
      "        $0",
      "    }",
      "}"
    ]
  },
  "One to One Relation": {
    "description": "Create a one-to-one relationship in a model with PHPStan comments",
    "prefix": "new:laravel:relation:one-to-one",
    "body": [
      "/**",
      " * @return HasOne<${1}, covariant $$this>",
      " */",
      "public function ${2}(): HasOne {",
      "    return $$this->hasOne(${1}::class);",
      "}"
    ]
  },
  "One to Many Relation": {
    "description": "Create a one-to-many relationship in a model with PHPStan comments",
    "prefix": "new:laravel:relation:one-to-many",
    "body": [
      "/**",
      " * @return HasMany<${1}, covariant $$this>",
      " */",
      "public function ${2}(): HasMany {",
      "    return $$this->hasMany(${1}::class);",
      "}"
    ]
  },
  "Many to Many Relation": {
    "description": "Create a many-to-many relationship in a model with PHPStan comments",
    "prefix": "new:laravel:relation:many-to-many",
    "body": [
      "/**",
      " * @return BelongsToMany<${1}, covariant $$this>",
      " */",
      "public function ${2}(): BelongsToMany {",
      "    return $$this->belongsToMany(${1}::class);",
      "}"
    ]
  }
}
